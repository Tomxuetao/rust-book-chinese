import{_ as e,c as s,o as n,d as a}from"./app.81eb1235.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u6027\u80FD\u5BF9\u6BD4\uFF1A\u5FAA\u73AF VS \u8FED\u4EE3\u5668","slug":"\u6027\u80FD\u5BF9\u6BD4-\u5FAA\u73AF-vs-\u8FED\u4EE3\u5668","link":"#\u6027\u80FD\u5BF9\u6BD4-\u5FAA\u73AF-vs-\u8FED\u4EE3\u5668","children":[]},{"level":2,"title":"\u603B\u7ED3","slug":"\u603B\u7ED3","link":"#\u603B\u7ED3","children":[]}],"relativePath":"ch13-04-performance.md","lastUpdated":1668669628000}'),o={name:"ch13-04-performance.md"},t=a(`<h2 id="\u6027\u80FD\u5BF9\u6BD4-\u5FAA\u73AF-vs-\u8FED\u4EE3\u5668" tabindex="-1">\u6027\u80FD\u5BF9\u6BD4\uFF1A\u5FAA\u73AF VS \u8FED\u4EE3\u5668 <a class="header-anchor" href="#\u6027\u80FD\u5BF9\u6BD4-\u5FAA\u73AF-vs-\u8FED\u4EE3\u5668" aria-hidden="true">#</a></h2><blockquote><p><a href="https://github.com/rust-lang/book/blob/main/src/ch13-04-performance.md" target="_blank" rel="noreferrer">ch13-04-performance.md</a><br> commit 009fffa4580ffb175f1b8470b5b12e4a63d670e4</p></blockquote><p>\u4E3A\u4E86\u51B3\u5B9A\u4F7F\u7528\u54EA\u4E2A\u5B9E\u73B0\uFF0C\u6211\u4EEC\u9700\u8981\u77E5\u9053\u54EA\u4E2A\u7248\u672C\u7684 <code>search</code> \u51FD\u6570\u66F4\u5FEB\u4E00\u4E9B\uFF1A\u662F\u76F4\u63A5\u4F7F\u7528 <code>for</code> \u5FAA\u73AF\u7684\u7248\u672C\u8FD8\u662F\u4F7F\u7528\u8FED\u4EE3\u5668\u7684\u7248\u672C\u3002</p><p>\u6211\u4EEC\u8FD0\u884C\u4E86\u4E00\u4E2A\u6027\u80FD\u6D4B\u8BD5\uFF0C\u901A\u8FC7\u5C06\u963F\u745F\xB7\u67EF\u5357\xB7\u9053\u5C14\u7684\u201C\u798F\u5C14\u6469\u65AF\u63A2\u6848\u96C6\u201D\u7684\u5168\u90E8\u5185\u5BB9\u52A0\u8F7D\u8FDB <code>String</code> \u5E76\u5BFB\u627E\u5176\u4E2D\u7684\u5355\u8BCD \u201Cthe\u201D\u3002\u5982\u4E0B\u662F <code>for</code> \u5FAA\u73AF\u7248\u672C\u548C\u8FED\u4EE3\u5668\u7248\u672C\u7684 <code>search</code> \u51FD\u6570\u7684\u6027\u80FD\u6D4B\u8BD5\u7ED3\u679C\uFF1A</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">test bench_search_for  ... bench:  19,620,300 ns/iter (+/- 915,700)</span></span>
<span class="line"><span style="color:#A6ACCD;">test bench_search_iter ... bench:  19,234,900 ns/iter (+/- 657,200)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u7ED3\u679C\u8FED\u4EE3\u5668\u7248\u672C\u8FD8\u8981\u7A0D\u5FAE\u5FEB\u4E00\u70B9\uFF01\u8FD9\u91CC\u6211\u4EEC\u5C06\u4E0D\u4F1A\u67E5\u770B\u6027\u80FD\u6D4B\u8BD5\u7684\u4EE3\u7801\uFF0C\u6211\u4EEC\u7684\u76EE\u7684\u5E76\u4E0D\u662F\u4E3A\u4E86\u8BC1\u660E\u4ED6\u4EEC\u662F\u5B8C\u5168\u7B49\u540C\u7684\uFF0C\u800C\u662F\u5F97\u51FA\u4E00\u4E2A\u600E\u6837\u6BD4\u8F83\u8FD9\u4E24\u79CD\u5B9E\u73B0\u65B9\u5F0F\u6027\u80FD\u7684\u57FA\u672C\u601D\u8DEF\u3002</p><p>\u5BF9\u4E8E\u4E00\u4E2A\u66F4\u5168\u9762\u7684\u6027\u80FD\u6D4B\u8BD5\uFF0C\u5C06\u4F1A\u68C0\u67E5\u4E0D\u540C\u957F\u5EA6\u7684\u6587\u672C\u3001\u4E0D\u540C\u7684\u641C\u7D22\u5355\u8BCD\u3001\u4E0D\u540C\u957F\u5EA6\u7684\u5355\u8BCD\u548C\u6240\u6709\u5176\u4ED6\u7684\u53EF\u53D8\u60C5\u51B5\u3002\u8FD9\u91CC\u6240\u8981\u8868\u8FBE\u7684\u662F\uFF1A\u8FED\u4EE3\u5668\uFF0C\u4F5C\u4E3A\u4E00\u4E2A\u9AD8\u7EA7\u7684\u62BD\u8C61\uFF0C\u88AB\u7F16\u8BD1\u6210\u4E86\u4E0E\u624B\u5199\u7684\u5E95\u5C42\u4EE3\u7801\u5927\u4F53\u4E00\u81F4\u6027\u80FD\u4EE3\u7801\u3002\u8FED\u4EE3\u5668\u662F Rust \u7684 <strong>\u96F6\u6210\u672C\u62BD\u8C61</strong>\uFF08<em>zero-cost abstractions</em>\uFF09\u4E4B\u4E00\uFF0C\u5B83\u610F\u5473\u7740\u62BD\u8C61\u5E76\u4E0D\u4F1A\u5F15\u5165\u8FD0\u884C\u65F6\u5F00\u9500\uFF0C\u5B83\u4E0E\u672C\u8D3E\u5C3C\xB7\u65AF\u7279\u52B3\u65AF\u7279\u5362\u666E\uFF08C++ \u7684\u8BBE\u8BA1\u548C\u5B9E\u73B0\u8005\uFF09\u5728 \u201CFoundations of C++\u201D\uFF082012\uFF09 \u4E2D\u6240\u5B9A\u4E49\u7684 <strong>\u96F6\u5F00\u9500</strong>\uFF08<em>zero-overhead</em>\uFF09\u5982\u51FA\u4E00\u8F99\uFF1A</p><blockquote><p>In general, C++ implementations obey the zero-overhead principle: What you don\u2019t use, you don\u2019t pay for. And further: What you do use, you couldn\u2019t hand code any better.</p><ul><li>Bjarne Stroustrup &quot;Foundations of C++&quot;</li></ul><p>\u4ECE\u6574\u4F53\u6765\u8BF4\uFF0CC++ \u7684\u5B9E\u73B0\u9075\u5FAA\u4E86\u96F6\u5F00\u9500\u539F\u5219\uFF1A\u4F60\u4E0D\u9700\u8981\u7684\uFF0C\u65E0\u9700\u4E3A\u4ED6\u4EEC\u4E70\u5355\u3002\u66F4\u6709\u751A\u8005\u7684\u662F\uFF1A\u4F60\u9700\u8981\u7684\u65F6\u5019\uFF0C\u4E5F\u4E0D\u53EF\u80FD\u627E\u5230\u5176\u4ED6\u66F4\u597D\u7684\u4EE3\u7801\u4E86\u3002</p><ul><li>\u672C\u8D3E\u5C3C\xB7\u65AF\u7279\u52B3\u65AF\u7279\u5362\u666E &quot;Foundations of C++&quot;</li></ul></blockquote><p>\u4F5C\u4E3A\u53E6\u4E00\u4E2A\u4F8B\u5B50\uFF0C\u8FD9\u91CC\u6709\u4E00\u4E9B\u53D6\u81EA\u4E8E\u97F3\u9891\u89E3\u7801\u5668\u7684\u4EE3\u7801\u3002\u89E3\u7801\u7B97\u6CD5\u4F7F\u7528\u7EBF\u6027\u9884\u6D4B\u6570\u5B66\u8FD0\u7B97\uFF08linear prediction mathematical operation\uFF09\u6765\u6839\u636E\u4E4B\u524D\u6837\u672C\u7684\u7EBF\u6027\u51FD\u6570\u9884\u6D4B\u5C06\u6765\u7684\u503C\u3002\u8FD9\u4E9B\u4EE3\u7801\u4F7F\u7528\u8FED\u4EE3\u5668\u94FE\u6765\u5BF9\u4F5C\u7528\u57DF\u4E2D\u7684\u4E09\u4E2A\u53D8\u91CF\u8FDB\u884C\u4E86\u67D0\u79CD\u6570\u5B66\u8BA1\u7B97\uFF1A\u4E00\u4E2A\u53EB <code>buffer</code> \u7684\u6570\u636E slice\u3001\u4E00\u4E2A\u6709 12 \u4E2A\u5143\u7D20\u7684\u6570\u7EC4 <code>coefficients</code>\u3001\u548C\u4E00\u4E2A\u4EE3\u8868\u4F4D\u79FB\u4F4D\u6570\u7684 <code>qlp_shift</code>\u3002\u4F8B\u5B50\u4E2D\u58F0\u660E\u4E86\u8FD9\u4E9B\u53D8\u91CF\u4F46\u5E76\u6CA1\u6709\u63D0\u4F9B\u4EFB\u4F55\u503C\uFF1B\u867D\u7136\u8FD9\u4E9B\u4EE3\u7801\u5728\u5176\u4E0A\u4E0B\u6587\u4E4B\u5916\u6CA1\u6709\u4EC0\u4E48\u610F\u4E49\uFF0C\u4E0D\u8FC7\u4ECD\u662F\u4E00\u4E2A\u7B80\u660E\u7684\u73B0\u5B9E\u4E2D\u7684\u4F8B\u5B50\uFF0C\u6765\u5C55\u793A Rust \u5982\u4F55\u5C06\u9AD8\u7EA7\u6982\u5FF5\u8F6C\u6362\u4E3A\u5E95\u5C42\u4EE3\u7801\uFF1A</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">let buffer: &amp;mut [i32];</span></span>
<span class="line"><span style="color:#A6ACCD;">let coefficients: [i64; 12];</span></span>
<span class="line"><span style="color:#A6ACCD;">let qlp_shift: i16;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">for i in 12..buffer.len() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    let prediction = coefficients.iter()</span></span>
<span class="line"><span style="color:#A6ACCD;">                                 .zip(&amp;buffer[i - 12..i])</span></span>
<span class="line"><span style="color:#A6ACCD;">                                 .map(|(&amp;c, &amp;s)| c * s as i64)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                 .sum::&lt;i64&gt;() &gt;&gt; qlp_shift;</span></span>
<span class="line"><span style="color:#A6ACCD;">    let delta = buffer[i];</span></span>
<span class="line"><span style="color:#A6ACCD;">    buffer[i] = prediction as i32 + delta;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u4E3A\u4E86\u8BA1\u7B97 <code>prediction</code> \u7684\u503C\uFF0C\u8FD9\u4E9B\u4EE3\u7801\u904D\u5386\u4E86 <code>coefficients</code> \u4E2D\u7684 12 \u4E2A\u503C\uFF0C\u4F7F\u7528 <code>zip</code> \u65B9\u6CD5\u5C06\u7CFB\u6570\u4E0E <code>buffer</code> \u7684\u524D 12 \u4E2A\u503C\u7EC4\u5408\u5728\u4E00\u8D77\u3002\u63A5\u7740\u5C06\u6BCF\u4E00\u5BF9\u503C\u76F8\u4E58\uFF0C\u518D\u5C06\u6240\u6709\u7ED3\u679C\u76F8\u52A0\uFF0C\u7136\u540E\u5C06\u603B\u548C\u53F3\u79FB <code>qlp_shift</code> \u4F4D\u3002</p><p>\u50CF\u97F3\u9891\u89E3\u7801\u5668\u8FD9\u6837\u7684\u7A0B\u5E8F\u901A\u5E38\u6700\u770B\u91CD\u8BA1\u7B97\u7684\u6027\u80FD\u3002\u8FD9\u91CC\uFF0C\u6211\u4EEC\u521B\u5EFA\u4E86\u4E00\u4E2A\u8FED\u4EE3\u5668\uFF0C\u4F7F\u7528\u4E86\u4E24\u4E2A\u9002\u914D\u5668\uFF0C\u63A5\u7740\u6D88\u8D39\u4E86\u5176\u503C\u3002Rust \u4EE3\u7801\u5C06\u4F1A\u88AB\u7F16\u8BD1\u4E3A\u4EC0\u4E48\u6837\u7684\u6C47\u7F16\u4EE3\u7801\u5462\uFF1F\u597D\u5427\uFF0C\u5728\u7F16\u5199\u672C\u4E66\u7684\u8FD9\u4E2A\u65F6\u5019\uFF0C\u5B83\u88AB\u7F16\u8BD1\u6210\u4E0E\u624B\u5199\u7684\u76F8\u540C\u7684\u6C47\u7F16\u4EE3\u7801\u3002\u904D\u5386 <code>coefficients</code> \u7684\u503C\u5B8C\u5168\u7528\u4E0D\u5230\u5FAA\u73AF\uFF1ARust \u77E5\u9053\u8FD9\u91CC\u4F1A\u8FED\u4EE3 12 \u6B21\uFF0C\u6240\u4EE5\u5B83\u201C\u5C55\u5F00\u201D\uFF08unroll\uFF09\u4E86\u5FAA\u73AF\u3002\u5C55\u5F00\u662F\u4E00\u79CD\u79FB\u9664\u5FAA\u73AF\u63A7\u5236\u4EE3\u7801\u7684\u5F00\u9500\u5E76\u66FF\u6362\u4E3A\u6BCF\u4E2A\u8FED\u4EE3\u4E2D\u7684\u91CD\u590D\u4EE3\u7801\u7684\u4F18\u5316\u3002</p><p>\u6240\u6709\u7684\u7CFB\u6570\u90FD\u88AB\u50A8\u5B58\u5728\u4E86\u5BC4\u5B58\u5668\u4E2D\uFF0C\u8FD9\u610F\u5473\u7740\u8BBF\u95EE\u4ED6\u4EEC\u975E\u5E38\u5FEB\u3002\u8FD9\u91CC\u4E5F\u6CA1\u6709\u8FD0\u884C\u65F6\u6570\u7EC4\u8BBF\u95EE\u8FB9\u754C\u68C0\u67E5\u3002\u6240\u6709\u8FD9\u4E9B Rust \u80FD\u591F\u63D0\u4F9B\u7684\u4F18\u5316\u4F7F\u5F97\u7ED3\u679C\u4EE3\u7801\u6781\u4E3A\u9AD8\u6548\u3002\u73B0\u5728\u77E5\u9053\u8FD9\u4E9B\u4E86\uFF0C\u8BF7\u653E\u5FC3\u5927\u80C6\u7684\u4F7F\u7528\u8FED\u4EE3\u5668\u548C\u95ED\u5305\u5427\uFF01\u4ED6\u4EEC\u4F7F\u5F97\u4EE3\u7801\u770B\u8D77\u6765\u66F4\u9AD8\u7EA7\uFF0C\u4F46\u5E76\u4E0D\u4E3A\u6B64\u5F15\u5165\u8FD0\u884C\u65F6\u6027\u80FD\u635F\u5931\u3002</p><h2 id="\u603B\u7ED3" tabindex="-1">\u603B\u7ED3 <a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a></h2><p>\u95ED\u5305\u548C\u8FED\u4EE3\u5668\u662F Rust \u53D7\u51FD\u6570\u5F0F\u7F16\u7A0B\u8BED\u8A00\u89C2\u5FF5\u6240\u542F\u53D1\u7684\u529F\u80FD\u3002\u4ED6\u4EEC\u5BF9 Rust \u4EE5\u5E95\u5C42\u7684\u6027\u80FD\u6765\u660E\u786E\u7684\u8868\u8FBE\u9AD8\u7EA7\u6982\u5FF5\u7684\u80FD\u529B\u6709\u5F88\u5927\u8D21\u732E\u3002\u95ED\u5305\u548C\u8FED\u4EE3\u5668\u7684\u5B9E\u73B0\u8FBE\u5230\u4E86\u4E0D\u5F71\u54CD\u8FD0\u884C\u65F6\u6027\u80FD\u7684\u7A0B\u5EA6\u3002\u8FD9\u6B63\u662F Rust \u7AED\u529B\u63D0\u4F9B\u96F6\u6210\u672C\u62BD\u8C61\u7684\u76EE\u6807\u7684\u4E00\u90E8\u5206\u3002</p><p>\u73B0\u5728\u6211\u4EEC\u6539\u8FDB\u4E86\u6211\u4EEC I/O \u9879\u76EE\u7684\uFF08\u4EE3\u7801\uFF09\u8868\u73B0\u529B\uFF0C\u8BA9\u6211\u4EEC\u770B\u4E00\u770B\u66F4\u591A <code>cargo</code> \u7684\u529F\u80FD\uFF0C\u4ED6\u4EEC\u5C06\u5E2E\u52A9\u6211\u4EEC\u51C6\u5907\u597D\u5C06\u9879\u76EE\u5206\u4EAB\u7ED9\u4E16\u754C\u3002</p>`,16),c=[t];function p(l,r,i,d,u,f){return n(),s("div",null,c)}const A=e(o,[["render",p]]);export{C as __pageData,A as default};
